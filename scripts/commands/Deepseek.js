module.exports.config = {
    name: "seek", 
    version: "1.0.0",
    permission: 0, 
    credits: "OpenRouter & Your Name", 
    description: "OpenRouter AI Integration with DeepSeek model (Text Only)",
    prefix: true, 
    category: "ai",
    usages: "/seek [prompt]\n/seek on - auto mode\n/seek off - disable auto mode",
    cooldowns: 3, 
};

const fs = require("fs-extra");     
const path = require("path");      
const cron = require("node-cron");  
const axios = require("axios");    

// üîê API KEY 
const OPENROUTER_API_KEY = "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";

// üóÇÔ∏è ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø
const HISTORY_DIR = path.join(__dirname, 'seek_histories'); 

let autoReplyState = {};

// üìà ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
const MAX_HISTORY_TURNS = 50; 
let loadedHistories = {};    

// üß† ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßã
async function loadHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        if (await fs.pathExists(threadHistoryFile)) {
            const data = await fs.readFile(threadHistoryFile, 'utf8');
            loadedHistories[threadID] = JSON.parse(data);
            console.log(`[Seek Bot] ‚úÖ ‡¶•‡ßç‡¶∞‡ßá‡¶° ${threadID} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
        } else {
            loadedHistories[threadID] = []; 
            console.log(`[Seek Bot] ‚ÑπÔ∏è ‡¶•‡ßç‡¶∞‡ßá‡¶° ${threadID} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø, ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§`);
        }
    } catch (error) {
        console.error(`[Seek Bot] ‚ùå ‡¶•‡ßç‡¶∞‡ßá‡¶° ${threadID} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:`, error);
        loadedHistories[threadID] = []; 
    }
}

// üíæ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßã
async function saveHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        await fs.ensureDir(HISTORY_DIR); 
        await fs.writeFile(threadHistoryFile, JSON.stringify(loadedHistories[threadID], null, 2), 'utf8');
        console.log(`[Seek Bot] ‚úÖ ‡¶•‡ßç‡¶∞‡ßá‡¶° ${threadID} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
    } catch (error) {
        console.error(`[Seek Bot] ‚ùå ‡¶•‡ßç‡¶∞‡ßá‡¶° ${threadID} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:`, error);
    }
}

// üóëÔ∏è ‡¶∏‡¶¨ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã (‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá)
async function resetAllHistories() {
    loadedHistories = {}; 
    try {
        if (await fs.pathExists(HISTORY_DIR)) {
            await fs.emptyDir(HISTORY_DIR); 
            console.log("[Seek Bot] üóëÔ∏è ‡¶∏‡¶¨ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
        } else {
            console.log("[Seek Bot] üóëÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§");
        }
    } catch (error) {
        console.error("[Seek Bot] ‚ùå ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:", error);
    }
}

// ‚è∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø 12 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞ ‡¶™‡¶∞ ‡¶∏‡¶¨ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
cron.schedule('0 */12 * * *', async () => {
    console.log('[Seek Bot] ‚è∞ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá...');
    await resetAllHistories();
}, {
    timezone: "Asia/Dhaka" 
});

// üìÅ ‡¶ï‡ßã‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßã
(async () => {
    await fs.ensureDir(HISTORY_DIR);
})();

// ü§ñ OpenRouter API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá DeepSeek ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì
async function getSeekResponse(userPrompt, threadID) {
    // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßã
    if (!loadedHistories[threadID]) {
        await loadHistoryForThread(threadID);
    }

    const currentConversationHistory = loadedHistories[threadID];

    try {
        // ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü: AI ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá
        const personaPrompt = " ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡¶ø AI ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡¶æ‡¶∞‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá ‡¶ï‡ßã‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá ‡¶®‡¶æ, ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Ü‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá ‡¶§‡¶ñ‡¶® ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá ‡¶è‡¶ï ‡¶¨‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶§‡¶¨‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Ø‡ßá‡¶® ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá";

        // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡ßü (‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶ñ‡¶æ‡¶≤‡¶ø), ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã
        if (currentConversationHistory.length === 0) {
            currentConversationHistory.push({ role: "user", content: personaPrompt });
            // ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã
            currentConversationHistory.push({ role: "assistant", content: "hi" });
        }

        const messagesForAPI = currentConversationHistory.map(entry => ({
            role: entry.role === "user" ? "user" : "assistant",
            content: entry.content
        }));

        // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã
        messagesForAPI.push({ role: "user", content: userPrompt });

        // OpenRouter API-‡¶§‡ßá HTTP POST ‡¶∞‡¶ø‡¶ï‡ßÅ‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
        const response = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            {
                // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá DeepSeek ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡¶æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶õ‡¶ø‡¶≤
                model: "deepseek/deepseek-r1-0528:free",
                messages: messagesForAPI,
                max_tokens: 2048, 
            },
            {
                headers: {
                    "Authorization": `Bearer ${OPENROUTER_API_KEY}`, 
                    "Content-Type": "application/json",              
                },
            }
        );

        // API ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá AI ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã
        const replyText = response.data.choices[0].message.content;

        // ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
        currentConversationHistory.push({ role: "user", content: userPrompt });
        currentConversationHistory.push({ role: "assistant", content: replyText });

        // ‡¶Ø‡¶¶‡¶ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶≤‡¶Æ‡ßç‡¶¨‡¶æ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶õ‡¶æ‡¶Å‡¶ü‡¶æ‡¶á ‡¶ï‡¶∞‡ßã
        if (currentConversationHistory.length > MAX_HISTORY_TURNS * 2) {
            loadedHistories[threadID] = currentConversationHistory.slice(currentConversationHistory.length - MAX_HISTORY_TURNS * 2);
        } else {
            loadedHistories[threadID] = currentConversationHistory;
        }

        // ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßã
        await saveHistoryForThread(threadID);
        return replyText; 
    } catch (error) {
        
        console.error("[Seek Bot] ‚ùå DeepSeek (OpenRouter) API ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error.response?.data || error.message);
        return "‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, DeepSeek API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

async function isAdmin(api, threadID, senderID) {
    try {
        const threadInfo = await api.getThreadInfo(threadID);
        
        return threadInfo.adminIDs.some(adminInfo => adminInfo.id === senderID);
    } catch (error) {
        console.error("[Seek Bot] ‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:", error);
        return false; 
    }
}

// ‚úÖ ‡¶Æ‡ßá‡¶á‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (/seek)
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" "); // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßá
    const threadID = event.threadID;
    const senderID = event.senderID;

    // "on" ‡¶¨‡¶æ "off" ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßã ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    if (input.toLowerCase() === "on") {
        if (!await isAdmin(api, threadID, senderID)) {
            return api.sendMessage("‚õî ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶Ö‡¶ü‡ßã DeepSeek ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§", threadID, event.messageID);
        }
        autoReplyState[threadID] = true; // ‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßã
        return api.sendMessage("‚úÖ ‡¶Ö‡¶ü‡ßã DeepSeek ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") {
        if (!await isAdmin(api, threadID, senderID)) {
            return api.sendMessage("‚õî ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶Ö‡¶ü‡ßã DeepSeek ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§", threadID, event.messageID);
        }
        autoReplyState[threadID] = false; // ‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßã
        return api.sendMessage("‚ùå ‡¶Ö‡¶ü‡ßã DeepSeek ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    // ‡¶Ø‡¶¶‡¶ø /seek ‡¶è‡¶∞ ‡¶™‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡ßü
    if (!input) {
        return api.sendMessage(
            "üß† DeepSeek ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/seek ‡¶ï‡ßã‡ßü‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ ‡¶´‡¶ø‡¶ú‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßã",
            threadID,
            event.messageID
        );
    }

    // AI ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶∏‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
    api.sendMessage("ü§ñ DeepSeek ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", threadID);

    // AI ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì
    const reply = await getSeekResponse(input, threadID);

    // AI ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
    return api.sendMessage(`ü§ñ DeepSeek:\n\n${reply}`, threadID, event.messageID);
};

module.exports.handleEvent = async function ({ api, event }) {
    const threadID = event.threadID;


    if (!autoReplyState[threadID]) return;
    if (event.senderID == api.getCurrentUserID()) return; 
    if (!event.body || event.body.length < 2) return; 
    if (event.body.startsWith("/") || event.body.startsWith("!")) return;

    const reply = await getSeekResponse(event.body, threadID);
    api.sendMessage(`ü§ñ DeepSeek:\n\n${reply}`, threadID, event.messageID);
};
