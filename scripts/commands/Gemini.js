// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration with Image Analysis",
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini [image attachment]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs-extra");
const path = require("path");
const cron = require("node-cron");

// üõ°Ô∏è Replace with your actual API KEY:
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA";

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

let autoReplyEnabled = false;

// üî• Conversation history settings
const HISTORY_DIR = path.join(__dirname, 'gemini_histories');
const MAX_HISTORY_TURNS = 10;

let loadedHistories = {};

// üîÑ Load history for thread
async function loadHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        if (await fs.pathExists(threadHistoryFile)) {
            const data = await fs.readFile(threadHistoryFile, 'utf8');
            loadedHistories[threadID] = JSON.parse(data);
            console.log(`‚úÖ Gemini history loaded for thread ${threadID}.`);
        } else {
            loadedHistories[threadID] = [];
            console.log(`‚ÑπÔ∏è Gemini history file not found for thread ${threadID}, starting with empty history.`);
        }
    } catch (error) {
        console.error(`‚ùå Error loading Gemini history for thread ${threadID}:`, error);
        loadedHistories[threadID] = [];
    }
}

// üíæ Save history for thread
async function saveHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        await fs.ensureDir(HISTORY_DIR);
        await fs.writeFile(threadHistoryFile, JSON.stringify(loadedHistories[threadID], null, 2), 'utf8');
        console.log(`‚úÖ Gemini history saved for thread ${threadID}.`);
    } catch (error) {
        console.error(`‚ùå Error saving Gemini history for thread ${threadID}:`, error);
    }
}

// üóëÔ∏è Reset all histories
async function resetAllHistories() {
    loadedHistories = {};
    try {
        if (await fs.pathExists(HISTORY_DIR)) {
            await fs.emptyDir(HISTORY_DIR);
            console.log("üóëÔ∏è All Gemini history files have been reset.");
        } else {
            console.log("üóëÔ∏è Gemini history directory not found, no histories to reset.");
        }
    } catch (error) {
        console.error("‚ùå Error resetting all Gemini histories:", error);
    }
}

// ‚è∞ Schedule history reset every 12 hours
cron.schedule('0 */12 * * *', async () => {
    console.log('‚è∞ Running scheduled Gemini history reset for all threads...');
    await resetAllHistories();
}, {
    timezone: "Asia/Dhaka"
});

// Ensure directory exists on bot load
(async () => {
    await fs.ensureDir(HISTORY_DIR);
    console.log(`‚ÑπÔ∏è Gemini history directory '${HISTORY_DIR}' ensured.`);
})();

// Function to convert Facebook attachment to Google Generative AI format
function fileToGenerativePart(buffer, mimeType) {
    return {
        inlineData: {
            data: buffer.toString("base64"),
            mimeType
        },
    };
}

async function askGemini(userPrompt, threadID, imageAttachments = []) {
    if (!loadedHistories[threadID]) {
        await loadHistoryForThread(threadID);
    }

    const currentConversationHistory = loadedHistories[threadID];

    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash"
        });

        const personaPrompt = "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶π‡¶ü ‡¶è‡¶®‡ßç‡¶° ‡¶∏‡ßá‡¶ï‡ßç‡¶∏‡¶ø ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá, ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡ßã‡¶ï‡¶æ‡¶Æ‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶§‡ßá‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßá‡•§";

        const messagesToSend = currentConversationHistory.map(entry => ({
            role: entry.role === "user" ? "user" : "model",
            parts: [{ text: entry.content }]
        }));

        let finalPromptForGemini;
        if (currentConversationHistory.length === 0) {
            finalPromptForGemini = `${personaPrompt}\n\nüëâ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${userPrompt}`;
        } else {
            finalPromptForGemini = userPrompt;
        }

        const chat = model.startChat({
            history: messagesToSend,
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        let result;
        if (imageAttachments.length > 0) {
            // Prepare image parts
            const imageParts = await Promise.all(imageAttachments.map(async attachment => {
                const buffer = await fs.readFile(attachment.path);
                return fileToGenerativePart(buffer, attachment.mime);
            }));

            // Combine text and images
            const combinedContent = [
                { text: finalPromptForGemini },
                ...imageParts
            ];

            result = await chat.sendMessage(combinedContent);
        } else {
            result = await chat.sendMessage(finalPromptForGemini);
        }

        const response = await result.response;
        const replyText = response.text();

        // Update conversation history
        currentConversationHistory.push({ role: "user", content: userPrompt });
        currentConversationHistory.push({ role: "assistant", content: replyText });

        if (currentConversationHistory.length > MAX_HISTORY_TURNS * 2) {
            loadedHistories[threadID] = currentConversationHistory.slice(currentConversationHistory.length - MAX_HISTORY_TURNS * 2);
        } else {
             loadedHistories[threadID] = currentConversationHistory;
        }

        await saveHistoryForThread(threadID);

        return replyText;
    } catch (error) {
        console.error("‚ùå Gemini API Error:", error.response?.data || error.message);
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// ‚úÖ /gemini command
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    const threadID = event.threadID;

    if (!input && !event.attachments) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini Explain Quantum Physics\n‡¶¨‡¶æ\n/gemini [‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶°] '‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶ï‡¶ø ‡¶Ü‡¶õ‡ßá?'",
            threadID,
            event.messageID
        );
    }

    if (input.toLowerCase() === "on") {
        autoReplyEnabled = true;
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") {
        autoReplyEnabled = false;
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®/‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶õ‡ßá...", threadID);

    // Process image attachments if any
    let imageAttachments = [];
    if (event.attachments) {
        for (const attachment of event.attachments) {
            if (attachment.type === "photo" || attachment.type === "image") {
                const imagePath = path.join(__dirname, `temp_${Date.now()}.jpg`);
                await fs.writeFile(imagePath, Buffer.from(await require("axios").get(attachment.url, { responseType: 'arraybuffer' })).data));
                imageAttachments.push({
                    path: imagePath,
                    mime: "image/jpeg"
                });
            }
        }
    }

    const reply = await askGemini(input, threadID, imageAttachments);
    
    // Clean up temporary image files
    for (const attachment of imageAttachments) {
        try {
            await fs.unlink(attachment.path);
        } catch (cleanupError) {
            console.error("Error cleaning up temp file:", cleanupError);
        }
    }

    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};

// üí¨ Auto responder
module.exports.handleEvent = async function ({ api, event }) {
    if (!autoReplyEnabled) return;
    if (event.senderID == api.getCurrentUserID()) return;
    if (!event.body || event.body.length < 2) return;

    if (event.body.startsWith(module.exports.config.prefix ? "/" : "!") || event.body.startsWith("/gemini")) return;

    const threadID = event.threadID;
    
    // Process image attachments if any
    let imageAttachments = [];
    if (event.attachments) {
        for (const attachment of event.attachments) {
            if (attachment.type === "photo" || attachment.type === "image") {
                const imagePath = path.join(__dirname, `temp_${Date.now()}.jpg`);
                await fs.writeFile(imagePath, Buffer.from(await require("axios").get(attachment.url, { responseType: 'arraybuffer' })).data));
                imageAttachments.push({
                    path: imagePath,
                    mime: "image/jpeg"
                });
            }
        }
    }

    const reply = await askGemini(event.body, threadID, imageAttachments);
    
    // Clean up temporary image files
    for (const attachment of imageAttachments) {
        try {
            await fs.unlink(attachment.path);
        } catch (cleanupError) {
            console.error("Error cleaning up temp file:", cleanupError);
        }
    }

    api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};
