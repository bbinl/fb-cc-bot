// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration",
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");

// üõ°Ô∏è ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï API KEY ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì:
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; // <<<--- REPLACE WITH YOUR ACTUAL API KEY

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

let autoReplyEnabled = false;

async function askGemini(userPrompt) {
    try {
        const model = genAI.getGenerativeModel({
            // üîÅ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶ï‡¶∞‡ßã ‚Äî ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
            // 'models/gemini-pro' ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá 'gemini-1.5-flash' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
            // ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá 'gemini-1.5-pro' ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§
            model: "gemini-1.5-flash" 
        });

        const chat = model.startChat({
            history: [],
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const friendlyPrompt = `
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ ‡¶ì ‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶≤‡¶ø AI, ‡¶Ø‡ßá‡¶ü‡¶æ Messenger-‡¶è ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá‡•§ 
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‚Äú‡¶§‡ßÅ‡¶Æ‡¶ø‚Äù ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶Ø‡ßá‡¶® ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ì‡¶¶‡ßá‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ 
‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§, ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶æ‡¶£‡¶¨‡¶®‡ßç‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶û‡ßç‡¶ú‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶õ‡ßã ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶®‡ßá‡¶ï‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá ‡¶∏‡¶¨‡¶æ‡¶á ‡¶π‡¶Ø‡¶º‡¶§‡ßã ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶®‡¶æ‡¶ì ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶§‡¶¨‡ßá ‡¶ï‡¶ñ‡¶®‡ßã‡¶á ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ ‡¶Æ‡¶æ‡¶ù‡ßá‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¢‡¶Ç ‡¶ï‡¶∞‡ßá‡¶ì ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã 
üëâ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${userPrompt}`;
        const result = await chat.sendMessage(friendlyPrompt);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error("Gemini API Error:", error);
        // Better error message for the user, indicating it's an internal bot issue
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// ‚úÖ /gemini ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    if (!input) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini Explain Quantum Physics",

            event.threadID,
            event.messageID
        );
    }

    if (input.toLowerCase() === "on") { // Added .toLowerCase() for robustness
        autoReplyEnabled = true;
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") { // Added .toLowerCase() for robustness
        autoReplyEnabled = false;
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }

    // Indicate that the bot is processing the request
    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", event.threadID);

    const reply = await askGemini(input);
    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, event.threadID, event.messageID);
};

// üí¨ ‡¶Ö‡¶ü‡ßã ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶°‡¶æ‡¶∞
module.exports.handleEvent = async function ({ api, event }) {
    if (!autoReplyEnabled) return;
    if (event.senderID == api.getCurrentUserID()) return; // Prevent bot from replying to itself
    if (!event.body || event.body.length < 2) return; // Ignore very short or empty messages

    // Ignore commands so auto-reply doesn't trigger on '/gemini on' etc.
    if (event.body.startsWith(module.exports.config.prefix ? "/" : "!") || event.body.startsWith("/gemini")) return;

    // You might want to add a small delay or a "typing..." indicator here
    // api.sendTypingIndicator(event.threadID); // Example, depending on your API wrapper

    const reply = await askGemini(event.body);
    api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, event.threadID, event.messageID);

};
