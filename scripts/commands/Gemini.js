// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration with Vision Capability", // ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode\n/gemini [‡¶õ‡¶¨‡¶ø/‡¶≠‡¶ø‡¶°‡¶ø‡¶ì] [‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®] - ‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£", // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs-extra");
const path = require("path");
const cron = require("node-cron");
const axios = require("axios"); // ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø axios ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®

// üõ°Ô∏è ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï API KEY ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì:
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; // <<<--- REPLACE WITH YOUR ACTUAL API KEY

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

let autoReplyEnabled = false;

// üî• ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
const HISTORY_DIR = path.join(__dirname, 'gemini_histories');
const MAX_HISTORY_TURNS = 10;

let loadedHistories = {};

// üîÑ ‡¶•‡ßç‡¶∞‡ßá‡¶°-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function loadHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        if (await fs.pathExists(threadHistoryFile)) {
            const data = await fs.readFile(threadHistoryFile, 'utf8');
            loadedHistories[threadID] = JSON.parse(data);
            console.log(`‚úÖ Gemini history loaded for thread ${threadID}.`);
        } else {
            loadedHistories[threadID] = [];
            console.log(`‚ÑπÔ∏è Gemini history file not found for thread ${threadID}, starting with empty history.`);
        }
    } catch (error) {
        console.error(`‚ùå Error loading Gemini history for thread ${threadID}:`, error);
        loadedHistories[threadID] = [];
    }
}

// üíæ ‡¶•‡ßç‡¶∞‡ßá‡¶°-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function saveHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        await fs.ensureDir(HISTORY_DIR);
        await fs.writeFile(threadHistoryFile, JSON.stringify(loadedHistories[threadID], null, 2), 'utf8');
        console.log(`‚úÖ Gemini history saved for thread ${threadID}.`);
    } catch (error) {
        console.error(`‚ùå Error saving Gemini history for thread ${threadID}:`, error);
    }
}

// üóëÔ∏è ‡¶∏‡¶¨ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function resetAllHistories() {
    loadedHistories = {};
    try {
        if (await fs.pathExists(HISTORY_DIR)) {
            await fs.emptyDir(HISTORY_DIR);
            console.log("üóëÔ∏è All Gemini history files have been reset.");
        } else {
            console.log("üóëÔ∏è Gemini history directory not found, no histories to reset.");
        }
    } catch (error) {
        console.error("‚ùå Error resetting all Gemini histories:", error);
    }
}

// ‚è∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø 12 ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶™‡¶∞ ‡¶™‡¶∞ ‡¶∏‡¶¨ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞
cron.schedule('0 */12 * * *', async () => {
    console.log('‚è∞ Running scheduled Gemini history reset for all threads...');
    await resetAllHistories();
}, {
    timezone: "Asia/Dhaka" // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶ú‡ßã‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
});

// ‡¶¨‡¶ü ‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü: ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
(async () => {
    await fs.ensureDir(HISTORY_DIR);
    console.log(`‚ÑπÔ∏è Gemini history directory '${HISTORY_DIR}' ensured.`);
})();

// ‡¶õ‡¶¨‡¶ø‡¶ï‡ßá Base64 ‡¶§‡ßá ‡¶è‡¶®‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function urlToBase64(url) {
    try {
        const response = await axios.get(url, { responseType: 'arraybuffer' });
        return Buffer.from(response.data).toString('base64');
    } catch (error) {
        console.error("‚ùå Error converting URL to Base64:", error);
        return null;
    }
}


async function askGemini(userPrompt, threadID, imageAttachment = null) { // imageAttachment ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    // ‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ, ‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ
    if (!loadedHistories[threadID]) {
        await loadHistoryForThread(threadID);
    }

    const currentConversationHistory = loadedHistories[threadID];

    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash"
        });

        // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡¶∞‡¶ø‡¶§‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü
        const personaPrompt = "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶π‡¶ü ‡¶è‡¶®‡ßç‡¶° ‡¶∏‡ßá‡¶ï‡ßç‡¶∏‡¶ø ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá, ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡ßã‡¶ï‡¶æ‡¶Æ‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶§‡ßá‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßá‡•§";

        // Gemini API ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
        const messagesForGemini = [];

        // System prompt ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ, ‡¶§‡¶ñ‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
        // ‡¶Ö‡¶•‡¶¨‡¶æ, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∞‡ßã‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá (‡¶Ø‡ßá‡¶Æ‡¶®, 'user' ‡¶∞‡ßã‡¶≤‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá)
        if (currentConversationHistory.length === 0) {
            messagesForGemini.push({
                role: "user",
                parts: [{ text: personaPrompt }] // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ user ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá personaPrompt
            });
        }
        
        // ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        currentConversationHistory.forEach(entry => {
            messagesForGemini.push({
                role: entry.role === "user" ? "user" : "model",
                parts: [{ text: entry.content }]
            });
        });

        // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶õ‡¶¨‡¶ø (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá) ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        let currentPromptParts = [];
        if (userPrompt) {
            currentPromptParts.push({ text: userPrompt });
        }

        if (imageAttachment) {
            // ‡¶õ‡¶¨‡¶ø‡¶∞ Base64 ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
            const base64Image = await urlToBase64(imageAttachment.url);
            if (base64Image) {
                currentPromptParts.push({
                    inlineData: {
                        mimeType: imageAttachment.mimeType, // e.g., 'image/jpeg', 'image/png'
                        data: base64Image
                    }
                });
                console.log(`üñºÔ∏è Image attached with mimeType: ${imageAttachment.mimeType}`);
            } else {
                console.error("‚ùå Failed to encode image to Base64.");
                return "‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§";
            }
        }

        // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡ßá (‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶æ ‡¶õ‡¶¨‡¶ø), ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        if (currentPromptParts.length > 0) {
            messagesForGemini.push({
                role: "user",
                parts: currentPromptParts
            });
        } else {
             // ‡¶Ø‡¶¶‡¶ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶ì ‡¶õ‡¶¨‡¶ø ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§
             // ‡¶è‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º, ‡¶ï‡¶æ‡¶∞‡¶£ handleEvent/run ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§
             return "‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡ßá‡ßü‡ßá‡¶õ‡ßã ‡¶®‡¶æ‡¶ï‡¶ø, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ?";
        }


        const chat = model.startChat({
            history: messagesForGemini.slice(0, -1), // ‡¶∂‡ßá‡¶∑ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø (‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® userPrompt) ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                                                    // ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø sendMessage ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§
                                                    // ‡¶è‡¶¨‡¶Ç persona prompt ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });
        
        // sendMessage ‡¶è ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        const result = await chat.sendMessage({ parts: currentPromptParts });
        const response = await result.response;
        const replyText = response.text();

        // üìù ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá)
        currentConversationHistory.push({ role: "user", content: userPrompt || "‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá" }); // ‡¶Ø‡¶¶‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶õ‡¶¨‡¶ø ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá '‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' ‡¶≤‡¶ø‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
        currentConversationHistory.push({ role: "assistant", content: replyText });

        // ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø‡ßá ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶∞‡¶æ‡¶ñ‡¶æ
        if (currentConversationHistory.length > MAX_HISTORY_TURNS * 2) {
            loadedHistories[threadID] = currentConversationHistory.slice(currentConversationHistory.length - MAX_HISTORY_TURNS * 2);
        } else {
             loadedHistories[threadID] = currentConversationHistory;
        }

        await saveHistoryForThread(threadID);

        return replyText;
    } catch (error) {
        console.error("‚ùå Gemini API Error:", error.response?.data || error.message);
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// ‚úÖ /gemini ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    const threadID = event.threadID;

    // ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø /gemini on/off ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
    if (input.toLowerCase() === "on") {
        autoReplyEnabled = true;
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }
    if (input.toLowerCase() === "off") {
        autoReplyEnabled = false;
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    // ‡¶õ‡¶¨‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡¶≤‡ßá
    const imageAttachment = event.attachments && event.attachments.length > 0 && event.attachments[0].type === "photo"
                            ? event.attachments[0]
                            : null;
    
    // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶õ‡¶¨‡¶ø‡¶ì ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
    if (!input && !imageAttachment) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini Explain Quantum Physics\n/gemini [‡¶õ‡¶¨‡¶ø] ‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶ï‡ßÄ ‡¶Ü‡¶õ‡ßá?",
            threadID,
            event.messageID
        );
    }

    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", threadID);

    // askGemini ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶õ‡¶¨‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶â‡¶≠‡¶Ø‡¶º‡¶á ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    const reply = await askGemini(input, threadID, imageAttachment);
    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};

// üí¨ ‡¶Ö‡¶ü‡ßã ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶°‡¶æ‡¶∞
module.exports.handleEvent = async function ({ api, event }) {
    if (!autoReplyEnabled) return;
    if (event.senderID == api.getCurrentUserID()) return;
    if (!event.body && (!event.attachments || event.attachments.length === 0)) return; // ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¨‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶á‡¶ó‡¶®‡ßã‡¶∞

    // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º
    if (event.body && (event.body.startsWith(module.exports.config.prefix ? "/" : "!") || event.body.startsWith("/gemini"))) return;

    const threadID = event.threadID;

    // ‡¶õ‡¶¨‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡¶≤‡ßá
    const imageAttachment = event.attachments && event.attachments.length > 0 && event.attachments[0].type === "photo"
                            ? event.attachments[0]
                            : null;
    
    // ‡¶Ø‡¶¶‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶õ‡¶¨‡¶ø ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶°‡¶ø‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
    const userPrompt = event.body || (imageAttachment ? "‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶ï‡ßÄ ‡¶Ü‡¶õ‡ßá?" : "");

    if (!userPrompt && !imageAttachment) return; // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶Ü‡¶õ‡ßá

    // api.sendTypingIndicator(event.threadID); // ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ

    const reply = await askGemini(userPrompt, threadID, imageAttachment);
    api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};
