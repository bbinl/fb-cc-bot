// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration",
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");

// üõ°Ô∏è ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï API KEY ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì:
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; // <<<--- REPLACE WITH YOUR ACTUAL API KEY

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

let autoReplyEnabled = false;

// üî• ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá (‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá)
// ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá: { role: "user" | "assistant", content: "message" }
let conversationHistory = [];
const MAX_HISTORY_TURNS = 5; // ‡¶∂‡ßá‡¶∑ 5‡¶ü‡¶ø user-assistant ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá

async function askGemini(userPrompt) {
    try {
        const model = genAI.getGenerativeModel({
            // üîÅ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶ï‡¶∞‡ßã ‚Äî ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
            // 'models/gemini-pro' ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá 'gemini-1.5-flash' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
            // ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá 'gemini-1.5-pro' ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§
            model: "gemini-1.5-flash"
        });

        // Gemini API ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
        const messagesToSend = conversationHistory.map(entry => ({
            role: entry.role === "user" ? "user" : "model", // Gemini API 'model' role ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
            parts: [{ text: entry.content }]
        }));

        // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        messagesToSend.push({ role: "user", parts: [{ text: userPrompt }] });


        const chat = model.startChat({
            history: messagesToSend, // ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const result = await chat.sendMessage(userPrompt); // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ userPrompt ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ history ‡¶â‡¶™‡¶∞‡ßá startChat ‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        const response = await result.response;
        const replyText = response.text();

        // üìù ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        conversationHistory.push({ role: "user", content: userPrompt });
        conversationHistory.push({ role: "assistant", content: replyText });

        // ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø‡ßá ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶∞‡¶æ‡¶ñ‡¶æ (‡¶Ø‡¶æ‡¶§‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡¶°‡¶º ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º)
        // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® (user + assistant) ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú, ‡¶§‡¶æ‡¶á MAX_HISTORY_TURNS * 2
        if (conversationHistory.length > MAX_HISTORY_TURNS * 2) {
            conversationHistory = conversationHistory.slice(conversationHistory.length - MAX_HISTORY_TURNS * 2);
        }

        return replyText;
    } catch (error) {
        console.error("Gemini API Error:", error);
        // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶§‡¶•‡ßç‡¶Ø‡¶¨‡¶π‡ßÅ‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// ‚úÖ /gemini ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    if (!input) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini Explain Quantum Physics",
            event.threadID,
            event.messageID
        );
    }

    if (input.toLowerCase() === "on") { // Added .toLowerCase() for robustness
        autoReplyEnabled = true;
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") { // Added .toLowerCase() for robustness
        autoReplyEnabled = false;
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }

    // ‡¶¨‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶ï‡¶∞‡ßá
    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", event.threadID);

    const reply = await askGemini(input);
    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, event.threadID, event.messageID);
};

// üí¨ ‡¶Ö‡¶ü‡ßã ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶°‡¶æ‡¶∞
module.exports.handleEvent = async function ({ api, event }) {
    if (!autoReplyEnabled) return;
    if (event.senderID == api.getCurrentUserID()) return; // ‡¶¨‡¶ü ‡¶Ø‡ßá‡¶® ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶æ ‡¶¶‡ßá‡ßü
    if (!event.body || event.body.length < 2) return; // ‡¶ñ‡ßÅ‡¶¨ ‡¶õ‡ßã‡¶ü ‡¶¨‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ

    // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡ßü
    if (event.body.startsWith(module.exports.config.prefix ? "/" : "!") || event.body.startsWith("/gemini")) return;

    // ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡ßã‡¶ü ‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨ ‡¶¨‡¶æ "typing..." ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
    // api.sendTypingIndicator(event.threadID); // ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ

    const reply = await askGemini(event.body);
    api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, event.threadID, event.messageID);
};
