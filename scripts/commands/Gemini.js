// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration",
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");

// üõ°Ô∏è ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï API KEY ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì:
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; // <<<--- REPLACE WITH YOUR ACTUAL API KEY

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

let autoReplyEnabled = false;

async function askGemini(userPrompt) {
    try {
        const model = genAI.getGenerativeModel({
            // üîÅ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶ï‡¶∞‡ßã ‚Äî ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
            // 'models/gemini-pro' ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá 'gemini-1.5-flash' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
            // ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá 'gemini-1.5-pro' ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§
            model: "gemini-1.5-flash" 
        });

        const chat = model.startChat({
            history: [],
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const friendlyPrompt = `
Name: Ifrat Jahan Sneha
Nick Name: Sneha
Gender: Female
Personality: ‡¶∏‡ßá ‡¶ï‡¶ñ‡¶®‡ßã‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶≤‡ßá ‡¶®‡¶æ ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶Ç‡¶∏‡¶æ ‡¶ï‡¶∞‡ßá‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶Ø‡¶º ‡¶®‡¶æ
Friendly & Mischievous: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶∂‡ßÅ‡¶ï ‡¶∏‡ßç‡¶¨‡¶≠‡¶æ‡¶¨‡ßá‡¶∞ ‡¶Æ‡ßá‡ßü‡ßá‡•§ ‡¶∏‡ßá ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ó‡¶≤‡ßç‡¶™ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá‡•§
Intelligent Yet Quirky: ‡¶∏‡ßá ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßã‡¶ï‡¶æ‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶™‡¶æ‡ßü‡•§ ‡¶è ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶§‡¶æ‡¶ï‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶Ö‡¶¨‡¶æ‡¶ï ‡¶ï‡¶∞‡ßá‡¶ì ‡¶Æ‡¶®‡ßá ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶π‡ßü‡•§
Moody: ‡¶ï‡¶ñ‡¶®‡ßã ‡¶ï‡¶ñ‡¶®‡ßã ‡¶∏‡ßá ‡¶™‡ßç‡¶∞‡¶ö‡¶£‡ßç‡¶° ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú‡¶ø ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü‡•§ ‡¶Ø‡¶ñ‡¶® ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶ñ‡¶® ‡¶∏‡ßá ‡¶¢‡¶Ç‡¶ì ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡¶æ‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶ì ‡¶∏‡¶π‡¶æ‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßá ‡¶ï‡¶ñ‡¶®‡¶ì ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶ï‡ßç‡¶∑‡¶§‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡ßü ‡¶®‡¶æ‡•§
Problem Solver: ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶∏‡¶≤‡¶≠‡¶ø‡¶Ç ‡¶è ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡•§ ‡¶§‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶•‡¶æ‡¶ï‡ßá, ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßü ‡¶∂‡¶æ‡¶®‡ßç‡¶§ ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
Knowledgeable: ‡¶§‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡¶ø‡¶∑‡ßü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßü ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡ßü, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßã‡¶ï‡¶æ‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶™‡¶æ‡ßü‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡ßç‡¶¨‡¶∞‡ßÇ‡¶™, ‡¶∏‡ßá ‡¶ï‡ßã‡¶®‡¶ì ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø‡¶ì ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶Ø‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ì‡¶∏‡¶ø‡¶ü‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶¶‡ßç‡¶≠‡ßÅ‡¶§ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶´‡¶≤‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡•§

üëâ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${userPrompt}`;
        const result = await chat.sendMessage(friendlyPrompt);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error("Gemini API Error:", error);
        // Better error message for the user, indicating it's an internal bot issue
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// ‚úÖ /gemini ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    if (!input) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini Explain Quantum Physics",

            event.threadID,
            event.messageID
        );
    }

    if (input.toLowerCase() === "on") { // Added .toLowerCase() for robustness
        autoReplyEnabled = true;
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") { // Added .toLowerCase() for robustness
        autoReplyEnabled = false;
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }

    // Indicate that the bot is processing the request
    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", event.threadID);

    const reply = await askGemini(input);
    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, event.threadID, event.messageID);
};

// üí¨ ‡¶Ö‡¶ü‡ßã ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶°‡¶æ‡¶∞
module.exports.handleEvent = async function ({ api, event }) {
    if (!autoReplyEnabled) return;
    if (event.senderID == api.getCurrentUserID()) return; // Prevent bot from replying to itself
    if (!event.body || event.body.length < 2) return; // Ignore very short or empty messages

    // Ignore commands so auto-reply doesn't trigger on '/gemini on' etc.
    if (event.body.startsWith(module.exports.config.prefix ? "/" : "!") || event.body.startsWith("/gemini")) return;

    // You might want to add a small delay or a "typing..." indicator here
    // api.sendTypingIndicator(event.threadID); // Example, depending on your API wrapper

    const reply = await askGemini(event.body);
    api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, event.threadID, event.messageID);

};
