// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration",
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs-extra");
const path = require("path");
const cron = require("node-cron");
const axios = require("axios"); // Added for HTTP requests (image upload/download)
const FormData = require("form-data"); // Added for multipart/form-data for image upload

// üîê API KEY - IMPORTANT: Replace with your actual Gemini API Key
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; // Make sure this is a valid API key
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// üóÇÔ∏è Paths
const HISTORY_DIR = path.join(__dirname, 'gemini_histories');
const STATE_FILE = path.join(__dirname, 'gemini_state.json');

let autoReplyState = {}; // üîÑ per-thread auto reply state
const MAX_HISTORY_TURNS = 50;
let loadedHistories = {};

// üîÑ Load auto reply state
async function loadAutoReplyState() {
    try {
        if (await fs.pathExists(STATE_FILE)) {
            const data = await fs.readFile(STATE_FILE, 'utf8');
            autoReplyState = JSON.parse(data);
            console.log(`üîÑ Auto reply state loaded.`);
        } else {
            autoReplyState = {};
        }
    } catch (err) {
        console.error("‚ùå Error loading auto reply state:", err);
        autoReplyState = {};
    }
}

// üíæ Save auto reply state
async function saveAutoReplyState() {
    try {
        await fs.writeFile(STATE_FILE, JSON.stringify(autoReplyState, null, 2), 'utf8');
        console.log(`üíæ Auto reply state saved.`);
    } catch (err) {
        console.error("‚ùå Error saving auto reply state:", err);
    }
}

// üß† Load history
async function loadHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        if (await fs.pathExists(threadHistoryFile)) {
            const data = await fs.readFile(threadHistoryFile, 'utf8');
            loadedHistories[threadID] = JSON.parse(data);
            console.log(`‚úÖ Gemini history loaded for thread ${threadID}.`);
        } else {
            loadedHistories[threadID] = [];
            console.log(`‚ÑπÔ∏è No history file found for thread ${threadID}, starting fresh.`);
        }
    } catch (error) {
        console.error(`‚ùå Error loading history for thread ${threadID}:`, error);
        loadedHistories[threadID] = [];
    }
}

// üíæ Save history
async function saveHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        await fs.ensureDir(HISTORY_DIR);
        await fs.writeFile(threadHistoryFile, JSON.stringify(loadedHistories[threadID], null, 2), 'utf8');
        console.log(`‚úÖ History saved for thread ${threadID}.`);
    } catch (error) {
        console.error(`‚ùå Error saving history for thread ${threadID}:`, error);
    }
}

// üóëÔ∏è Reset all histories
async function resetAllHistories() {
    loadedHistories = {};
    try {
        if (await fs.pathExists(HISTORY_DIR)) {
            await fs.emptyDir(HISTORY_DIR);
            console.log("üóëÔ∏è All histories reset.");
        } else {
            console.log("üóëÔ∏è No history directory found.");
        }
    } catch (error) {
        console.error("‚ùå Error resetting histories:", error);
    }
}

// ‚è∞ Schedule reset every 12 hours
cron.schedule('0 */12 * * *', async () => {
    console.log('‚è∞ Scheduled Gemini history reset running...');
    await resetAllHistories();
}, {
    timezone: "Asia/Dhaka" // Timezone set to Bangladesh
});

// üìÅ Ensure folders exist and load state
(async () => {
    await fs.ensureDir(HISTORY_DIR);
    await loadAutoReplyState();
})();

// ü§ñ Ask Gemini
async function askGemini(userPrompt, threadID, imageUrl = null) {
    if (!loadedHistories[threadID]) {
        await loadHistoryForThread(threadID);
    }

    const currentConversationHistory = loadedHistories[threadID];

    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash" // Using gemini-1.5-flash which supports vision
        });

        const personaPrompt = "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶π‡¶ü ‡¶è‡¶®‡ßç‡¶° ‡¶∏‡ßá‡¶ï‡ßç‡¶∏‡¶ø ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá, ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡ßã‡¶ï‡¶æ‡¶Æ‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶§‡ßá‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßá‡•§";

        let contents = []; // Array to hold parts for Gemini (text and/or image)

        // Add persona prompt if starting a new conversation and no image is present as the first input
        if (currentConversationHistory.length === 0 && !imageUrl) {
            contents.push({ text: personaPrompt });
        }

        // Add historical messages to contents
        const historyForChat = currentConversationHistory.map(entry => ({
            role: entry.role === "user" ? "user" : "model",
            parts: [{ text: entry.content }]
        }));

        // Handle image if provided
        if (imageUrl) {
            try {
                const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' });
                const imageBuffer = Buffer.from(imageResponse.data);
                const mimeType = imageResponse.headers['content-type'] || 'image/jpeg'; // Determine MIME type

                contents.push({
                    inlineData: {
                        mimeType: mimeType,
                        data: imageBuffer.toString('base64')
                    }
                });
            } catch (imageError) {
                console.error("‚ùå Error processing image for Gemini:", imageError.message);
                // Continue with text prompt if image fails, or handle as per desired logic
            }
        }
        
        // Add the current user prompt
        contents.push({ text: userPrompt });

        const chat = model.startChat({
            history: historyForChat, // Pass existing history
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const result = await chat.sendMessage(contents); // Send current contents (text + image if any)
        const response = await result.response;
        const replyText = response.text();

        // Update history
        currentConversationHistory.push({ role: "user", content: userPrompt, imageUrl: imageUrl });
        currentConversationHistory.push({ role: "assistant", content: replyText });

        // Trim history if it gets too long
        if (currentConversationHistory.length > MAX_HISTORY_TURNS * 2) {
            loadedHistories[threadID] = currentConversationHistory.slice(currentConversationHistory.length - MAX_HISTORY_TURNS * 2);
        } else {
            loadedHistories[threadID] = currentConversationHistory;
        }

        await saveHistoryForThread(threadID);
        return replyText;
    } catch (error) {
        console.error("‚ùå Gemini API Error:", error.response?.data || error.message);
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// ‚úÖ /gemini ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    const threadID = event.threadID;

    // Handle commands for auto-reply
    if (input.toLowerCase() === "on") {
        autoReplyState[threadID] = true;
        await saveAutoReplyState();
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") {
        autoReplyState[threadID] = false;
        await saveAutoReplyState();
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    // Handle direct text prompt for /gemini command
    if (!input && (!event.attachments || event.attachments.length === 0)) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶¶‡¶ø‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini Explain Quantum Physics",
            threadID,
            event.messageID
        );
    }

    let userPrompt = input;
    let imageUrl = null;

    // Check for attached images with the command
    if (event.attachments && event.attachments.length > 0) {
        const imageAttachment = event.attachments.find(att => att.type === "photo");
        if (imageAttachment) {
            api.sendMessage("üñºÔ∏è ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", threadID, event.messageID);
            try {
                const form = new FormData();
                const imageStream = await axios.get(imageAttachment.url, { responseType: 'stream' });
                form.append('image', imageStream.data, { filename: 'image.jpg', contentType: imageAttachment.contentType || 'image/jpeg' });

                const uploadResponse = await axios.post("https://nayan-gemini-api.onrender.com/upload", form, {
                    headers: form.getHeaders(),
                    maxContentLength: Infinity,
                    maxBodyLength: Infinity,
                });

                if (uploadResponse.data.success && uploadResponse.data.imageUrl) {
                    imageUrl = uploadResponse.data.imageUrl;
                    console.log("Image uploaded via /gemini command:", imageUrl);
                } else {
                    console.error("Image upload failed via /gemini command:", uploadResponse.data);
                    return api.sendMessage("‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
                }
            } catch (error) {
                console.error("Error uploading image via /gemini command:", error);
                return api.sendMessage("‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
            }
        }
    }

    // If no text prompt and an image is present, set a default prompt for the image
    if (!userPrompt && imageUrl) {
        userPrompt = "‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶ï‡ßÄ ‡¶Ü‡¶õ‡ßá?";
    } else if (!userPrompt && !imageUrl) {
         // Should ideally be caught by the initial !input check, but good for robustness
         return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶¶‡¶ø‡¶®‡•§",
            threadID,
            event.messageID
        );
    }

    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", threadID);
    const reply = await askGemini(userPrompt, threadID, imageUrl);
    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};

// üí¨ ‡¶Ö‡¶ü‡ßã ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶°‡¶æ‡¶∞ (Handles messages without command prefix)
module.exports.handleEvent = async function ({ api, event }) {
    const threadID = event.threadID;

    // Only proceed if auto-reply is enabled for this thread, not from bot itself, and has content
    if (!autoReplyState[threadID]) return;
    if (event.senderID == api.getCurrentUserID()) return;
    // Ensure there's either text body or attachments
    if (!event.body && (!event.attachments || event.attachments.length === 0)) return;
    // Ignore if message starts with a command prefix
    if (event.body && (event.body.startsWith("/") || event.body.startsWith("!"))) return;

    let userPrompt = event.body || "‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶ï‡ßÄ ‡¶Ü‡¶õ‡ßá?"; // Default prompt if only an image is sent
    let imageUrl = null;

    // Check for attached images in auto-reply mode
    if (event.attachments && event.attachments.length > 0) {
        const imageAttachment = event.attachments.find(att => att.type === "photo");
        if (imageAttachment) {
            api.sendMessage("üñºÔ∏è ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", threadID);
            try {
                const form = new FormData();
                const imageStream = await axios.get(imageAttachment.url, { responseType: 'stream' });
                form.append('image', imageStream.data, { filename: 'image.jpg', contentType: imageAttachment.contentType || 'image/jpeg' });

                const uploadResponse = await axios.post("https://nayan-gemini-api.onrender.com/upload", form, {
                    headers: form.getHeaders(),
                    maxContentLength: Infinity,
                    maxBodyLength: Infinity,
                });

                if (uploadResponse.data.success && uploadResponse.data.imageUrl) {
                    imageUrl = uploadResponse.data.imageUrl;
                    console.log("Image uploaded via auto-responder:", imageUrl);
                } else {
                    console.error("Image upload failed via auto-responder:", uploadResponse.data);
                    return api.sendMessage("‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
                }
            } catch (error) {
                console.error("Error uploading image via auto-responder:", error);
                return api.sendMessage("‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
            }
        }
    }

    // Only send to Gemini if there's a prompt (text or derived from image) or an image URL
    if (userPrompt || imageUrl) {
        api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", threadID);
        const reply = await askGemini(userPrompt, threadID, imageUrl);
        api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
    }
};
